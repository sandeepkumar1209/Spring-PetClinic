pipeline {
    agent none
    environment {
        PROJECT = "WELCOME TO Jenkins-Terraform Modules Pipeline"
        TERRAFORM_MODULE_REPO = "https://github.com/saikiranpi/Terraform_Modules.git"
    }
    stages {
        stage ('For Parallel Stages') {
            parallel {
                stage('Deploy To Development') {
                    agent {label 'DEV'}
                    environment {
                        DEV_ACCOUNT = "225989353406"
                        DEVDEFAULTAMI = "ami-04b4f1a9cf54c11d0"
                        TERRAFORM_APPLY = "YES"
                        TERRAFORM_DESTROY = "NO"
                    }
                    when {
                        branch 'development'
                    }
                    stages {
                        stage ('Clone Terraform Modules') {
                            steps {
                                sh 'pwd'
                                sh 'rm -rf terraform-modules'
                                sh 'ls -al'
                                sh "git clone ${TERRAFORM_MODULE_REPO} terraform-modules"
                                sh 'ls -al terraform-modules/development'
                                sh 'find terraform-modules/development -name "*.tf"'
                            }
                        }
                        stage ('Terraform Init & Plan') {
                            when {
                                expression {
                                    "${env.TERRAFORM_APPLY}" == 'YES'
                                }
                            }
                            steps {
                                dir('terraform-modules/development') { // Navigate to development directory  
                                    sh 'terraform init'
                                    sh 'terraform validate'
                                    sh 'terraform pan -var-file=terraform.tfvars'
                                }
                            }
                        }
                        stage ('Terraform Apply') {
                            when {
                                expression {
                                    "${env.TERRAFORM_APPLY}" == 'YES'
                                }
                            }
                            steps {
                                dir('terraform-modules/development') {
                                    sh 'terraform apply -var-file=terraform.tfvars --auto-approve'
                                }
                            }
                        }
                        stage ('Terraform Destroy') {
                            when {
                                expression {
                                    "${env.TERRAFORM_DESTROY}" == 'YES'
                                }
                            }
                            steps {
                                dir('terraform-modules/development') {
                                    sh 'terraform init'
                                    sh 'terraform validate'
                                    sh 'terraform destroy -var-file=terraform.tfvars --auto-approve'
                                }
                            }
                        }

                    }
            }

        }
    }
        post {
        success {
            slackSend(color: 'good', message: "Pipeline Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}") 
        }
        failure {
            slackSend(color: 'danger', message: "Pipeline Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}") 
        }
        aborted {
            slackSend(color: 'warning', message: "Pipeline Aborted: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}")
        }
        always {
            echo "I always run."
        }
    }
}
}
